// A random simplicial Complex generated by keeping the maximal hyperedges in the random hyperedge

class RandomASC extends RandomHypergraph{
  int analytic_numofsubsetchecks_simple; // how many times subset checks occured.
  int analytic_numofsubsetchecks_sorted;
  float runtm_simple = 0,runtm_sorted = 0;
  RandomASC(int N,float p){
     super();
     //println(N," ",p);
     this.numvert = N;
     this.p = p;
     analytic_numofsubsetchecks_simple = 0;
     analytic_numofsubsetchecks_sorted = 0;
  }
  void generaterandomasc(){
    println("random abstract simplicial complex");
    generate_hypedge_bitset();
    float tm = millis();
    List<Integer> indicestorem = new ArrayList();
    for(int i = 0; i<hypedges_bitset.size()-1; i++){
      BitSet potentialsubset = new BitSet(numvert+1);
      for(int j = 0; j<hypedges_bitset.size(); j++){
        if(j == i) continue;
        BitSet potentialsuperset = new BitSet(numvert+1);
        potentialsubset = (BitSet)hypedges_bitset.get(i).clone();
        potentialsuperset = (BitSet)hypedges_bitset.get(j).clone();
        //println(potentialsubset);
        //println(potentialsuperset);
        analytic_numofsubsetchecks_simple ++;
        if(isSubset(potentialsubset,potentialsuperset)){
          
          //println("yes");
          //println(getstrhyperedge(hypedges_bitset.get(j)) + " contains " + getstrhyperedge(hypedges_bitset.get(i)),potentialsubset);
          indicestorem.add(i);
          break;
        }
        
      }    
    }
    
    
    
    Collections.sort(indicestorem, Collections.reverseOrder());
    for (int i : indicestorem){
      //println("removing: ",getstrhyperedge(hypedges_bitset.get(i)));
      hypedges_bitset.remove(i);
    }
    
    runtm_simple= (millis() - tm); // tap runtime
    
      println("simplicial complex: ");
    for(BitSet b:hypedges_bitset){
      //println(getstrhyperedge(b));
      addEdge(b);
    }
    
    println("done generating simplicial complex: |V| = ",this.totaladdednodes, " |E| = ",this.totaladdedhypedges);
  }
  
  String getstrhyperedge(BitSet b){
    String s = "";
    for(int id = 0;id<=numvert+1;id++)
      if(b.get(id) == true)
        s+=(String.valueOf(id)+",");
     return s;
  }
  
    void generaterandomasc_test(){
    println("Sorted random abstract simplicial complex");
    generate_hypedge_bitset();
    Collections.sort(hypedges_bitset, new Comparator<BitSet>() {
        @Override
        public int compare(BitSet bit2, BitSet bit1)
        {
            // sort in descending order of bitset cardinality (number of 1's) 
            return  bit1.cardinality() - bit2.cardinality();
        }
    });
    
     
    float tm = millis();
    
    for(int i = 0; i<hypedges_bitset.size(); i++){
      BitSet potentialsuperset = new BitSet(numvert+1);
      potentialsuperset = (BitSet)hypedges_bitset.get(i).clone();
      for(int j = hypedges_bitset.size()-1; j>i; j--){ // from last subset to the the i'th one
        BitSet potentialsubset = new BitSet(numvert+1);
        potentialsubset = (BitSet)hypedges_bitset.get(j).clone();
        //println(potentialsubset);
        //println(potentialsuperset);
        analytic_numofsubsetchecks_sorted++;
        if(isSubset(potentialsubset,potentialsuperset)){ 
           hypedges_bitset.remove(j);
        }
        
      }    
    }
    
    runtm_sorted= (millis() - tm); // tap runtime
      
      println("simplicial complex: ");
    for(BitSet b:hypedges_bitset){
      println(getstrhyperedge(b));
      addEdge(b);
    }
    
    println("done generating simplicial complex: |V| = ",this.totaladdednodes, " |E| = ",this.totaladdedhypedges);
  }
  
  // Returns true if a is a subset of b, false otherwise (assume a and b are distinct set)
  boolean isSubset(BitSet a, BitSet b){
    if(a.cardinality()>=b.cardinality()) return false; // a shouldn't be larger or equal in cardinality
    else{
      BitSet acopy = (BitSet) a.clone();
      acopy.andNot(b);
      return acopy.length() == 0;
    }
  }
  
}